<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd"
        default-autowire="byName">
        <!-- 全局按名称自动装配注入，按类型需确保容器中只有一个该类型对象 -->
    
    
    <!-- <import resource="xml文件路径"/> -->
        
    <!-- 数据源对象: C3P0连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
		<property name="jdbcUrl" value="jdbc:mysql:///hib_demo"></property>
		<property name="user" value="root"></property>
		<property name="password" value="root"></property>
		<property name="initialPoolSize" value="3"></property>
		<property name="maxPoolSize" value="10"></property>
		<property name="maxStatements" value="100"></property>
		<property name="acquireIncrement" value="2"></property>
	</bean>
	<!-- #############Spring声明式事务管理配置############### -->
	<!-- 1 配置事务管理器类 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 2 配置事务增强(如何管理事务) -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*" read-only="false"/>
		</tx:attributes>
	</tx:advice>
	<!-- 3 Aop配置： 拦截哪些方法(切入点表表达式) + 应用上面的事务增强配置 -->
	<aop:config>
		<aop:pointcut expression="execution(* cn.itcast.a_tx.DeptService.save(..))" id="pt"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pt"/>
	</aop:config>
        
        
        

	<!--默认单利模式创建 scope="singleton" 容器创建之前就会创建,lazy-init="true" 延迟加载
		只对单利有效，即用到时才会创建,scope="prototype" 多利容器创建之后且用到时才会创建
		对象创建时执行 init-method="方法名",容器销毁时执行 destroy-method="方法名"-->
	<!-- 按名称自动装配注入 autowire="byName" -->
	<bean id="user" class="com.shiyu.pojo.User" scope="prototype" autowire="byName">
		<!-- 有参构造器创建对象 constructor-arg -->
		<constructor-arg index="" value="" type="" ref=""></constructor-arg>
		<!-- set方法注入值 -->
		<property name="name" value="张三" ref=""/>
		<!-- 内部bean注入 -->
		<property name="name">
			<bean class="java.lang.String">
				<constructor-arg value="张三"/>
			</bean>
		</property>
	</bean>
	<!-- p标签注入 -->
	<bean id="s" class="java.lang.String"><constructor-arg value="张三"/></bean>
	<bean id="user1" class="com.shiyu.pojo.User" p:name-ref="s"/>
	<bean id="user2" class="com.shiyu.pojo.User" p:name="张三"/>
	
	<!-- 工厂模式创建对象 -->
	<bean id="xxx" class="工厂对象路径"/>
	<bean id="xxy" factory-bean="xxx" factory-method="工厂中的方法"/>
	<!-- 静态工厂 -->
	<bean id="xxy" factory-bean="工厂对象路径" factory-method="工厂中的方法"/>
	
	<!-- 开启注解模式，可与xml配置模式一起使用 -->
	<context:component-scan base-package="com.service"></context:component-scan>

	<!-- 开启aop注解模式 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<!-- aopXml配置模式 -->
	<!-- aop切面类 -->
	<bean id="aop" class="com.shiyu.test.Aop"/>
	<aop:config>
		<!-- 定义一个切入点表达式：拦截一定是定位到方法 -->
		<!--<aop:pointcut expression="execution(* cn.itcast.g_pointcut.*.*(..))" id="pt"/>-->
		<!-- 【拦截所有public方法】 -->
		<!--<aop:pointcut expression="execution(public * *(..))" id="pt"/>-->
		<!-- 【拦截所有save开头的方法 】 -->
		<!--<aop:pointcut expression="execution(* save*(..))" id="pt"/>-->
		<!-- 【拦截指定类的指定方法】 -->
		<!--<aop:pointcut expression="execution(public * cn.itcast.g_pointcut.OrderDao.save(..))" id="pt"/>-->
		<!-- 【拦截指定类的所有方法】 -->
		<!--<aop:pointcut expression="execution(* cn.itcast.g_pointcut.UserDao.*(..))" id="pt"/>-->
		<!-- 【拦截指定包，以及其自包下所有类的所有方法】 -->
		<!--<aop:pointcut expression="execution(* cn..*.*(..))" id="pt"/>-->
		<!-- 【多个表达式】 -->
		<!--<aop:pointcut expression="execution(* cn.itcast.g_pointcut.UserDao.save()) || execution(* cn.itcast.g_pointcut.OrderDao.save())" id="pt"/>
			<aop:pointcut expression="execution(* cn.itcast.g_pointcut.UserDao.save()) or execution(* cn.itcast.g_pointcut.OrderDao.save())" id="pt"/>-->
		<!-- 且关系，没有意义,后面的不会拦截       &转义为&amp; -->
		<!--<aop:pointcut expression="execution(* cn.itcast.g_pointcut.UserDao.save()) &amp;&amp; execution(* cn.itcast.g_pointcut.OrderDao.save())" id="pt"/>
			<aop:pointcut expression="execution(* cn.itcast.g_pointcut.UserDao.save()) and execution(* cn.itcast.g_pointcut.OrderDao.save())" id="pt"/>-->
		<!-- 【取非值】 -->
		<!--<aop:pointcut expression="!execution(* cn.itcast.g_pointcut.OrderDao.save())" id="pt"/>
		<aop:pointcut expression=" not execution(* cn.itcast.g_pointcut.OrderDao.save())" id="pt"/>-->
		
		<!-- 定义切入点表达式 -->
		<aop:pointcut expression="execution(* 类路径.*(..))" id="pt"/>
		<!-- 引用切面 -->
		<aop:aspect ref="aop">
			<!-- 前置通知 -->
			<aop:before method="ben" pointcut-ref="pt"/>
		</aop:aspect>
	</aop:config>
</beans>